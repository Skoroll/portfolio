[
  {
    "id": 1,
    "page": "Template Thérapeute",
    "short": "Site en 4 pages, facilement adaptable à toutes les pratiques de thérapeute. Comporte un choix entre 3 langues intégrées.",
    "name": "Template Thérapeute",
    "tools": "React, TypeScript, Tailwind",
    "need": "Créer un template modulaire et rapide pour un thérapeute.",
    "solution": "Pour la modularité : <ul><li>J'ai créé beaucoup de composants avec des props typés (avec TS).</li> <li>Ces composants peuvent être imbriqués les uns dans les autres ou être utilisés de manière indépendante.</li> <li>Tous les textes sont renseignés dans des fichiers JSON pour simplifier le changement de langue.</li><br />Le site est simple d'utilisation et ne comporte que les informations importantes.<br/>Il n'y a pas de formulaire de réservation : je suis parti du principe que le client avait déjà sa plateforme (Doctolib/Perfactive/Terapiz ...).",
    "cover": "/works/TemplateThera/TT_1.webp",
    "images": [
      "/works/TemplateThera/TT_1.webp",
      "/works/TemplateThera/TT_2.webp",
      "/works/TemplateThera/TT_3.webp"
    ],
    "why": "Je souhaitais avoir un template simple et efficace à proposer à des futurs clients indépendants.<br/> L'objectif secondaire était de me perfectionner avec Tailwind et TypeScript et d'approfondir mes connaissances.",
    "link": "https://skoroll.github.io/template_therapist_1/"
  },
  {
    "id": 2,
    "page": "Skorol Music",
    "short": "Simple application rapide à mettre à jour et facilement partageable pour faire découvrir des chansons.",
    "name": "Skorol Music",
    "tools": "React, TypeScript, Tailwind",
    "need": "Partager une liste de morceaux.",
    "solution": "Skorol Music me permet de partager rapidement de la musique sur mes réseaux. Le site est facile à mettre à jour car les morceaux sont injectés via un fichier JS.<br/>Le site est divisé en 2 pages : <ul><li>La page d'accueil</li><li>La page des filtres</li></ul>La première affiche sous forme de collapses les 3 morceaux de la semaine, tandis que la deuxième page permet d'accéder aux morceaux des semaines précédentes en les filtrant par genre.",
    "cover": "/works/SkorolMusic/SC_0.webp",
    "images": [
      "/works/SkorolMusic/SC_1.webp",
      "/works/SkorolMusic/SC_2.webp",
      "/works/SkorolMusic/SC_3.webp"
    ],
    "why": "Enrichir mes réseaux sociaux et m'entraîner avec Tailwind et TypeScript.",
    "link": "https://skoroll.github.io/skorol-music/"
  },
  {
    "id": 3,
    "page": "Greek Taverna",
    "short": "Création d'un template de restaurant.",
    "name": "Greek Taverna",
    "tools": "React, TypeScript, SASS",
    "need": "Créer un template à proposer à des clients.",
    "solution": "Site simple permettant aux clients de consulter la carte et de faire une réservation via un formulaire dédié.<br/>Les catégories du menu (boissons, entrées, plats ...) sont divisées clairement.",
    "cover": "/works/GreekTaverna/GT_1.webp",
    "images": [
      "/works/GreekTaverna/GT_1.webp",
      "/works/GreekTaverna/GT_2.webp",
      "/works/GreekTaverna/GT_3.webp",
      "/works/GreekTaverna/GT_4.webp",
      "/works/GreekTaverna/GT_5.webp",
      "/works/GreekTaverna/GT_6.webp",
      "/works/GreekTaverna/GT_7.webp",
      "/works/GreekTaverna/GT_8.webp"
    ],
    "why": "Simplifier la création de sites web pour les restaurateurs.",
    "link": null
  },
  {
    "id": 4,
    "page": "GameMaster SoundBoard",
    "short": "[WIP] Application de soundboard pour jeu de rôle.",
    "name": "GameMaster SoundBoard",
    "tools": "React, SASS",
    "need": "Créer un outil simple et rapide d'utilisation pour animer des sessions de jeu de rôle. Cette application est destinée à devenir une future application mobile.",
    "solution": "Application sans login, avec des sons prédéfinis. Possibilité d'en faire une application avec un back pour permettre aux utilisateurs d'uploader leurs sons.",
    "cover": "/works/GameMasterSoundBoard/ezgif-5-a77219475d.gif",
    "images": [
      "/works/GameMasterSoundBoard/ezgif-5-a77219475d.gif"
    ],
    "why": "J'ai besoin d'un outil rapide pour jouer des sons dans mes sessions de jeu de rôle.",
    "link": null
  },
  {
    "id": 5,
    "page": "ChoreHelper",
    "short": "[WIP] Application web permettant d'organiser ses tâches par pièces, avec un ajout de tâches personnalisées.",
    "name": "ChoreHelper",
    "tools": "React, Node.js",
    "need": "Créer une application web permettant d'organiser son ménage. L'utilisateur doit pouvoir créer son compte et renseigner les pièces de sa maison. Une fois cela fait, l'application lui attribue une liste de tâches génériques correspondant à ses pièces. Il peut ensuite ajouter, modifier ou supprimer des tâches.",
    "solution": "Projet full-stack mené seul, principalement pour m'entraîner avec React et approfondir les concepts abordés lors de ma formation.",
    "cover": "/works/CleanHelper/CH_0.webp",
    "images": [
      "/works/CleanHelper/CH_0.webp",
      "/works/CleanHelper/CH_1.webp",
      "/works/CleanHelper/CH_4.webp",
      "/works/CleanHelper/CH_2.webp",
      "/works/CleanHelper/CH_3.webp"
    ],
    "why": "Avoir un outil aidant à organiser son ménage.",
    "link": "https://skoroll.github.io/Clean/"
  },
  {
    "id": 6,
    "page": "Kasa",
    "short": "Création d'un site avec React, comportant diverses routes et un système d'affichage des informations d'appartements.",
    "name": "Kasa",
    "tools": "React",
    "need": "Créer un site complet de location d'appartements. Le concept est de mettre en relation propriétaires et futurs locataires. L'affichage des cartes et des données des appartements devait être dynamique, nécessitant le moins d'intervention possible pour afficher les données. Le site devait être totalement fonctionnel à la fin du projet, et je devais être capable de justifier tous les choix techniques.",
    "solution": "Le site a été créé avec React, en se basant sur la maquette fournie. Le site a nécessité plusieurs composants réutilisables, et j'ai également dû mettre en place les différentes routes, ainsi qu'une route de récupération (404) en cas de problème d'URL. J'ai aussi appris à créer des composants utilisant différents hooks afin de gérer les états.",
    "cover": "/works/Kasa/Kasa1.webp",
    "images": [
      "/works/Kasa/Kasa1.webp",
      "/works/Kasa/Kasa2.webp",
      "/works/Kasa/Kasa3.webp",
      "/works/Kasa/Kasa4.webp"
    ],
    "why": "Mettre à jour le front d'un site de location.",
    "link": null
  },
  {
    "id": 7,
    "page": "Nina",
    "short": "Débogage, SEO et optimisation, création d'un rapport d'intervention détaillé.",
    "name": "Nina Carducci",
    "tools": "Optimisation, Débogage, SEO",
    "need": "Le site d'une photographe présentait deux bugs, de mauvaises performances techniques et des problèmes de SEO (Search Engine Optimization = optimisation pour les moteurs de recherche). Le but était ici d'améliorer le tout, tant au niveau technique qu'au niveau du référencement. Pour ce faire, j'ai utilisé Lighthouse, le plug-in Wave, Twitter Card, Open Graph et les Rich Snippets.",
    "solution": "J'ai établi un rapport d'intervention détaillant les modifications apportées. Pour la partie technique, j'ai changé le format des photos (de JPG à WEBP) pour qu'elles soient plus légères sans perte de qualité et s'affichent plus rapidement. La taille des images a aussi été réduite, également pour accélérer le temps d'affichage. La minification des fichiers CSS et JS a amélioré la vitesse d'affichage du site. L'ajout d'un <i>defer</i> sur les pages JS a permis de lancer les scripts après le chargement du HTML. Mes différentes modifications ont permis d'améliorer la note Lighthouse, passant de <b>88, 68, 100, 70</b> à <b>95, 100, 100, 100</b>.",
    "cover": "/works/Nina/codeSEO1.webp",
    "images": [
      "/works/Nina/codeSEO1.webp",
      "/works/Nina/codeSEO2.webp",
      "/works/Nina/Nina_Score.webp"
    ],
    "why": "Le site d'une photographe était lent et mal référencé.",
    "link": null
  },
  {
    "id": 8,
    "page": "Grimoire",
    "short": "Serveur Express.js à créer, avec login/logout et formulaire d'ajout d'entrée sur la DB.",
    "name": "Mon Vieux Grimoire",
    "tools": "Node.js, Express, MongoDB",
    "need": "Créer le back-end d'un site de notation de livres. La partie front existait déjà. Il fallait créer une API Rest, la faire communiquer avec une base de données et mettre en place un système de login.<br/>Une fois fait, les livres devaient pouvoir être notés par les utilisateurs. Les cartes des livres devaient renvoyer vers les détails de l'œuvre et montrer les livres les mieux notés du site.",
    "solution": "J'ai créé un serveur en utilisant Node.js et Express.<br/>L'API devait permettre de créer un compte et de s'identifier, de créer, modifier, supprimer un livre et de noter des œuvres. Elle devait aussi, bien sûr, permettre de récupérer les livres stockés sur la base de données.<br/>Côté base de données, MongoDB a été utilisé.<br/>En termes de sécurité, j'ai ajouté bcrypt, helmet, express rate limit.",
    "cover": "/works/Grimoire/grimoire0.webp",
    "images": [
      "/works/Grimoire/grimoire0.webp",
      "/works/Grimoire/grimoire1.webp",
      "/works/Grimoire/grimoire2.webp",
      "/works/Grimoire/grimoire3.webp",
      "/works/Grimoire/grimoire4.webp"
    ],
    "why": "Un site de notation de livres n'avait aucun back-end.",
    "link": null
  }
]
